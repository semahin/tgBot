from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler
import requests
import os
import pandas as pd
from db import init_db, save_purchase, get_user_purchases

init_db()
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
ITEMS_PER_PAGE = 5

CSV_URL = "https://zakupki.gov.ru/epz/order/orderCsvSettings/download.html?morphology=on&search-filter=%D0%94%D0%B0%D1%82%D0%B5+%D1%80%D0%B0%D0%B7%D0%BC%D0%B5%D1%89%D0%B5%D0%BD%D0%B8%D1%8F&pageNumber=1&sortDirection=false&recordsPerPage=_10&showLotsInfoHidden=false&savedSearchSettingsIdHidden=setting_order_kwysrk2v&sortBy=UPDATE_DATE&fz44=on&fz223=on&af=on&ca=on&pc=on&pa=on&currencyIdGeneral=-1&customerPlace=5277376%2C5277374&customerPlaceCodes=73000000000%2C63000000000&okpd2Ids=8874163%2C8874162%2C8874161&okpd2IdsCodes=63.9%2C63.1%2C62.0&OrderPlacementSmallBusinessSubject=on&OrderPlacementRnpData=on&OrderPlacementExecutionRequirement=on&orderPlacement94_0=0&orderPlacement94_1=0&orderPlacement94_2=0&from=1&to=500&placementCsv=true&registryNumberCsv=true&stepOrderPlacementCsv=true&methodOrderPurchaseCsv=true&nameOrderCsv=true&purchaseNumbersCsv=true&numberLotCsv=true&nameLotCsv=true&maxContractPriceCsv=true&currencyCodeCsv=true&maxPriceContractCurrencyCsv=true&currencyCodeContractCurrencyCsv=true&scopeOkdpCsv=true&scopeOkpdCsv=true&scopeOkpd2Csv=true&scopeKtruCsv=true&ea615ItemCsv=true&customerNameCsv=true&organizationOrderPlacementCsv=true&publishDateCsv=true&lastDateChangeCsv=true&startDateRequestCsv=true&endDateRequestCsv=true&ea615DateCsv=true&featureOrderPlacementCsv=true"

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–∫—É–ø–∫—É", callback_data='csv_0')],
        [InlineKeyboardButton("üì• –ü–æ–ª—É—á–∏—Ç—å CSV", callback_data='get_csv')],
        [InlineKeyboardButton("üìã –ú–æ–π —Å–ø–∏—Å–æ–∫", callback_data='mylist')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

def load_csv_rows():
    try:
        df = pd.read_csv("zakupki_export.csv", sep=";", encoding="windows-1251")
        return df
    except Exception:
        return pd.DataFrame()
    
def get_csv_row(index: int):
    df = load_csv_rows()
    total = len(df)
    if 0 <= index < total:
        return df.iloc[index], total
    return None, total

async def send_csv_row(update, context, index: int, is_edit: bool):
    row, total = get_csv_row(index)

    if row is None:
        text = "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        if is_edit:
            await update.callback_query.edit_message_text(text)
        else:
            await update.message.reply_text(text)
        return

    title = row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏", "‚ùì")
    price = row.get("–ù–∞—á–∞–ª—å–Ω–∞—è (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è) —Ü–µ–Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", "‚ùì")
    customer = row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ó–∞–∫–∞–∑—á–∏–∫–∞", "‚ùì")
    date = row.get("–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", "‚ùì")
    deadline = row.get("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫", "‚ùì")

    message = (
        f"üìå *{title}*\n"
        f"üí∞ {price} ‚ÇΩ\n"
        f"üè¢ {customer}\n"
        f"üìÖ {date} ‚Üí ‚è≥ {deadline}\n\n"
    )

    buttons = []

    if index > 0:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"csv_{index - 1}"))
    buttons.append(InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"save_{index}"))
    if index + 1 < total:
        buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"csv_{index + 1}"))

    reply_markup = InlineKeyboardMarkup([buttons])

    if is_edit:
        await update.callback_query.edit_message_text(
            message.strip(),
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_markdown(message.strip(), reply_markup=reply_markup)

async def show_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_csv_row(update, context, index=0, is_edit=False)

async def handle_csv_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("csv_"):
        index = int(data.split("_")[1])
        await send_csv_row(update, context, index, is_edit=True)

    elif data.startswith("save_"):
        index = int(data.split("_")[1])
        row, total = get_csv_row(index)

        if row is not None:
            user_id = query.from_user.id

            name = row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏", "‚ùì")
            price = row.get("–ù–∞—á–∞–ª—å–Ω–∞—è (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è) —Ü–µ–Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", "‚ùì")
            customer = row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ó–∞–∫–∞–∑—á–∏–∫–∞", "‚ùì")
            date = row.get("–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", "‚ùì")
            deadline = row.get("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫", "‚ùì")

            save_purchase(user_id, name, price, customer, date, deadline)
            await query.answer("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        else:
            await query.answer("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ /list!")
    await menu(update, context)

async def get_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    headers = {"User-Agent": "Mozilla/5.0"}
    response = requests.get(CSV_URL, headers=headers)

    file_path = "zakupki_export.csv"
    with open(file_path, "wb") as f:
        f.write(response.content)

    with open(file_path, "rb") as doc:
        await update.message.reply_document(document=doc)

    await update.message.reply_text("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

async def save_first_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    import pandas as pd

    user_id = update.effective_user.id

    try:
        df = pd.read_csv("zakupki_export.csv", sep=';', encoding='windows-1251')
        row = df.iloc[0]

        name = row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏", "‚ùì")
        price = row.get("–ù–∞—á–∞–ª—å–Ω–∞—è (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è) —Ü–µ–Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", "‚ùì")
        customer = row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ó–∞–∫–∞–∑—á–∏–∫–∞", "‚ùì")
        date = row.get("–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", "‚ùì")
        deadline = row.get("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫", "‚ùì")

        save_purchase(user_id, name, price, customer, date, deadline)

        await update.message.reply_text("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫!")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def show_saved(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    rows = get_user_purchases(user_id)

    if not rows:
        await update.message.reply_text("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫.")
        return

    message = ""
    for r in rows:
        message += (
            f"üìå *{r[0]}*\n"
            f"üí∞ {r[1]}\n"
            f"üè¢ {r[2]}\n"
            f"üìÖ {r[3]} ‚Üí ‚è≥ {r[4]}\n\n"
        )

    await update.message.reply_markdown(message.strip())

async def list_of_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/getcsv - –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª\n/showcsv - –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥\n/save - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—Å–ª—É–≥—É\n/mylist - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥\n/list - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥!")

app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("getcsv", get_csv))
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("showcsv", show_csv))
app.add_handler(CallbackQueryHandler(handle_csv_callback, pattern="^(csv_|save_)"))
app.add_handler(CommandHandler("save", save_first_csv))
app.add_handler(CommandHandler("mylist", show_saved))
app.add_handler(CommandHandler("list", list_of_commands))
app.add_handler(CommandHandler("menu", menu))

app.run_polling()